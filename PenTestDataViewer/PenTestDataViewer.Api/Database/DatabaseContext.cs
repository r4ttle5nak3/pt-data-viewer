using Microsoft.EntityFrameworkCore;
using PenTestDataViewer.Api.Model;
using System.Net;

namespace PenTestDataViewer.Api.Database
{
    public class DatabaseContext : DbContext
    {
        public DatabaseContext(DbContextOptions options) : base(options) { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            var domains = new[]
            {
                new Domain { Id=Guid.NewGuid(), SubDomain = string.Empty, TopDomain = "topdomain.target" },
                new Domain { Id=Guid.NewGuid(), SubDomain = "www", TopDomain = "topdomain.target" },
                new Domain { Id=Guid.NewGuid(), SubDomain = "www3", TopDomain = "topdomain.target" },
                new Domain { Id=Guid.NewGuid(), SubDomain = "help", TopDomain = "topdomain.target" },
            };

            var hosts = new[]
            {
                new Model.Host { Id=Guid.NewGuid(), IPv4=IPAddress.Parse("127.0.0.1") },
                new Model.Host { Id=Guid.NewGuid(), IPv4=IPAddress.Parse("192.168.0.1")},
                new Model.Host { Id=Guid.NewGuid(), IPv4=IPAddress.Parse("10.10.0.123") },
                new Model.Host { Id=Guid.NewGuid(), IPv6=IPAddress.Parse("::1") },
            };

            var port = new Port { Id = Guid.NewGuid(), PortNumber = 22, ServiceName = "OpenSSH" };
            port.HostId = hosts[1].Id;

            modelBuilder.Entity<Domain>()
                .HasMany(e => e.Hosts)
                .WithMany(e => e.Domains)
                .UsingEntity(
                    e => e.HasData(
                            new { HostsId = hosts[0].Id, DomainsId = domains[1].Id },
                            new { HostsId = hosts[1].Id, DomainsId = domains[1].Id },
                            new { HostsId = hosts[2].Id, DomainsId = domains[2].Id }
                        )
                );
            modelBuilder.Entity<Model.Host>()
                .HasMany(e => e.Ports)
                .WithOne(e => e.Host)
                .HasForeignKey("HostId")
                .IsRequired(false)
                .OnDelete(DeleteBehavior.Cascade);

            modelBuilder.Entity<Domain>().HasData(domains);
            modelBuilder.Entity<Model.Host>().HasData(hosts);
            modelBuilder.Entity<Port>().HasData(port);
        }

        public DbSet<Domain> Domains { get; set; }

        public DbSet<Model.Host> Hosts { get; set; }

        public DbSet<Port> Ports { get; set; }
    }
}
