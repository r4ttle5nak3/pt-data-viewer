using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Domain;
using PenTestDataViewer.Api.Model;

namespace PenTestDataViewer.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class DomainsController : ControllerBase
    {
        private readonly DatabaseContext _context;

        public DomainsController(DatabaseContext context)
        {
            _context = context;
        }

        // GET: api/Domains
        [HttpGet]
        public async Task<ActionResult<IEnumerable<DomainDto>>> GetDomains([FromQuery] string? topDomain, [FromQuery] string? subDomain)
        {
          if (_context.Domains == null)
          {
              return NotFound();
          }
            var domains = _context.Domains
                .Include(domain => domain.Hosts)
                .Where(d => d.TopDomain.Contains(topDomain ?? string.Empty) && d.SubDomain.Contains(subDomain ?? string.Empty))
                .AsNoTracking()
                .Select(DomainDto.FromDatabaseModel)
                .ToList();

            return Ok(domains);
        }

        // GET: api/Domains/5
        [HttpGet("{id}")]
        public async Task<ActionResult<DomainDto>> GetDomain(Guid id)
        {
          if (_context.Domains == null)
          {
              return NotFound();
          }
            var domain = await _context.Domains.FindAsync(id);

            if (domain == null)
            {
                return NotFound();
            }

            return DomainDto.FromDatabaseModel(domain);
        }

        // PUT: api/Domains/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutDomain(Guid id, DomainDto domain)
        {
            if (domain == null || id != domain.Id)
            {
                return BadRequest();
            }
            var dbDomain = await _context.Domains.FindAsync(domain.Id);

            if (dbDomain == null)
            {
                NotFound();
            }

            dbDomain.TopDomain = domain.TopDomain;
            dbDomain.SubDomain = domain.SubDomain;
            dbDomain.Hosts.AddRange(domain.Hosts.Select(DomainHostDto.ToDatabaseModel));

            _context.Entry(dbDomain).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!DomainExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Domains
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<DomainDto>> PostDomain(DomainDto domain)
        {
            if (domain.Id != null)
            {
                return BadRequest("Do not add uuid to new host");
            }
            if (_context.Domains == null)
            {
              return Problem();
            }
            var dbDomain = DomainDto.ToDatabaseModel(domain);
            _context.Domains.Add(dbDomain);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetDomain", new { id = dbDomain.Id }, dbDomain);
        }

        // DELETE: api/Domains/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDomain(Guid id)
        {
            if (_context.Domains == null)
            {
                return NotFound();
            }
            var domain = await _context.Domains.FindAsync(id);
            if (domain == null)
            {
                return NotFound();
            }

            _context.Domains.Remove(domain);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool DomainExists(Guid id)
        {
            return (_context.Domains?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
