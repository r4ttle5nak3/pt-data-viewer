using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.VisualBasic.FileIO;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Host;
using PenTestDataViewer.Api.Model;
using PenTestDataViewer.Api.Services.Import;

namespace PenTestDataViewer.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class HostsController : ControllerBase
    {
        private readonly DatabaseContext _context;
        private readonly INmapXmlParser _nmapXmlParser;

        public HostsController(DatabaseContext context, INmapXmlParser nmapXmlParser)
        {
            _context = context;
            _nmapXmlParser = nmapXmlParser;
        }

        // GET: api/Hosts
        [HttpGet]
        public async Task<ActionResult<IEnumerable<HostDto>>> GetHosts([FromQuery] string? ipv4 = "", [FromQuery] string? ipv6 = "")
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            return _context.Hosts
                .Include(entity => entity.Domains)
                .Include(entity => entity.Ports)
                .AsNoTracking()
                .Select(entity => HostDto.FromDatabaseModel(entity))
                .AsEnumerable()
                .Where(entity => entity.IPv4.ToString().Contains(ipv4))
                .Where(entity => entity.IPv6.ToString().Contains(ipv6))
                .ToList();
        }

        // GET: api/Hosts/5
        [HttpGet("{id}")]
        public async Task<ActionResult<HostDto>> GetHost(Guid id)
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            var host = await _context.Hosts
                .Include(entity => entity.Domains)
                .Include(entity => entity.Ports)
                .FirstOrDefaultAsync(entity => entity.Id == id);

            if (host == null)
            {
                return NotFound();
            }

            return HostDto.FromDatabaseModel(host);
        }

        // PUT: api/Hosts/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutHost(Guid id, HostDto host)
        {
            if (id != host.Id)
            {
                return BadRequest();
            }

            if (string.IsNullOrWhiteSpace(host.IPv4) && string.IsNullOrWhiteSpace(host.IPv6))
            {
                return BadRequest();
            }

            var dbModel = HostDto.ToDatabaseModel(host);

            var existingHost = await _context.Hosts
                .Include(h => h.Domains)
                .Include(entity => entity.Ports)
                .FirstAsync(h => h.Id == id);
            existingHost.IPv4 = dbModel.IPv4;
            existingHost.IPv6 = dbModel.IPv6;
            existingHost.OS = dbModel.OS;
            existingHost.Domains.Clear();
            existingHost.Domains.AddRange(dbModel.Domains);
            existingHost.Ports.Clear();
            existingHost.Ports.AddRange(dbModel.Ports);

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!HostExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Hosts
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<HostDto>> PostHost(HostDto host)
        {
            if (string.IsNullOrWhiteSpace(host.IPv4) && string.IsNullOrWhiteSpace(host.IPv6))
            {
                return BadRequest("Host should have an IP address");
            }

            if (host.Id.HasValue)
            {
                return BadRequest("Do not add uuid to new host");
            }

            if (_context.Hosts == null)
            {
                return Problem();
            }

            var model = HostDto.ToDatabaseModel(host);
            var returnedCopy = new Model.Host
            {
                Id = model.Id,
                IPv4 = model.IPv4,
                IPv6 = model.IPv6,
                OS = model.OS,
            };

            var copiedDomains = new Domain[model.Domains.Count()];
            model.Domains.CopyTo(copiedDomains);
            returnedCopy.Domains.AddRange(copiedDomains);

            var copiedPorts = new Port[model.Ports.Count()];
            model.Ports.CopyTo(copiedPorts);
            returnedCopy.Ports.AddRange(copiedPorts);

            _context.Hosts.Add(model);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetHost", new { id = returnedCopy.Id }, HostDto.FromDatabaseModel(returnedCopy));
        }

        // DELETE: api/Hosts/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteHost(Guid id)
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            var host = await _context.Hosts.FindAsync(id);
            if (host == null)
            {
                return NotFound();
            }

            _context.Hosts.Remove(host);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        // Import hosts from Nmap xml file
        [HttpPost("import_nmap")]
        public async Task<IActionResult> ImportNmapXml(IFormFile fileData)
        {
            try
            {
                using var stream = new MemoryStream();
                fileData.CopyTo(stream);
                stream.Position = 0;
                var successfullyParsed = await _nmapXmlParser.TryReadFromStreamAsync(stream);
                if (successfullyParsed)
                {
                    var hostDtos = _nmapXmlParser.Hosts;
                    var dbModels = hostDtos.Select(HostDto.ToDatabaseModel).ToList();
                    await _context.AddRangeAsync(dbModels);
                    await _context.SaveChangesAsync();
                }
                else
                {
                    return BadRequest("Failed to read sent file.");
                }

            }
            catch (Exception)
            {
                return Problem("Failed to read sent file.");
            }

            return Ok();
        }

        //[HttpGet("list")]
        //public Task<IActionResult> GetList()
        //{

        //}

        private bool HostExists(Guid id)
        {
            return (_context.Hosts?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
