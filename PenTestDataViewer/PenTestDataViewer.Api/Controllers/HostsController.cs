using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Hosting;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Host;
using PenTestDataViewer.Api.Model;

namespace PenTestDataViewer.Api.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Produces("application/json")]
    public class HostsController : ControllerBase
    {
        private readonly DatabaseContext _context;

        public HostsController(DatabaseContext context)
        {
            _context = context;
        }

        // GET: api/Hosts
        [HttpGet]
        public async Task<ActionResult<IEnumerable<HostDto>>> GetHosts([FromQuery] string? ipv4 = "", [FromQuery] string? ipv6 = "")
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            return _context.Hosts
                .Include(entity => entity.Domains)
                .AsNoTracking()
                .Select(entity => HostDto.FromDatabaseModel(entity))
                .AsEnumerable()
                .Where(entity => entity.IPv4.ToString().Contains(ipv4))
                .ToList();
        }

        // GET: api/Hosts/5
        [HttpGet("{id}")]
        public async Task<ActionResult<HostDto>> GetHost(Guid id)
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            var host = await _context.Hosts.Include(entity => entity.Domains).FirstOrDefaultAsync(entity => entity.Id == id);

            if (host == null)
            {
                return NotFound();
            }

            return HostDto.FromDatabaseModel(host);
        }

        // PUT: api/Hosts/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutHost(Guid id, HostDto host)
        {
            if (id != host.Id)
            {
                return BadRequest();
            }

            if (string.IsNullOrWhiteSpace(host.IPv4) && string.IsNullOrWhiteSpace(host.IPv6))
            {
                return BadRequest();
            }

            _context.Entry(host).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!HostExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Hosts
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<HostDto>> PostHost(HostDto host)
        {
            if ( string.IsNullOrWhiteSpace(host.IPv4) && string.IsNullOrWhiteSpace(host.IPv6))
            {
                return BadRequest();
            }

            if (_context.Hosts == null)
            {
                return Problem("Entity set 'DatabaseContext.Hosts'  is null.");
            }
            var model = HostDto.ToDatabaseModel(host);
            var returnedCopy = new Model.Host
            {
                Id = model.Id,
                IPv4 = model.IPv4,
                IPv6 = model.IPv6,
                OS = model.OS,
            };
            _context.Hosts.Add(model);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetHost", new { id = returnedCopy.Id }, HostDto.FromDatabaseModel(returnedCopy));
        }

        // DELETE: api/Hosts/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteHost(Guid id)
        {
            if (_context.Hosts == null)
            {
                return NotFound();
            }
            var host = await _context.Hosts.FindAsync(id);
            if (host == null)
            {
                return NotFound();
            }

            _context.Hosts.Remove(host);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool HostExists(Guid id)
        {
            return (_context.Hosts?.Any(e => e.Id == id)).GetValueOrDefault();
        }
    }
}
