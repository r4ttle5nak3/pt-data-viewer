// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenTestDataViewer.Api.Database;

#nullable disable

namespace PenTestDataViewer.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostsId")
                        .HasColumnType("uuid");

                    b.HasKey("DomainsId", "HostsId");

                    b.HasIndex("HostsId");

                    b.ToTable("DomainHost");

                    b.HasData(
                        new
                        {
                            DomainsId = new Guid("8fc843af-e4ed-4687-80ea-be5de2b2def0"),
                            HostsId = new Guid("6f897068-ec0b-4da6-9a3c-83af67b8de72")
                        },
                        new
                        {
                            DomainsId = new Guid("8fc843af-e4ed-4687-80ea-be5de2b2def0"),
                            HostsId = new Guid("c61ef333-984d-4dfd-853b-55d2f79d6257")
                        },
                        new
                        {
                            DomainsId = new Guid("9ff5c8c9-9cf9-4d32-9c00-81d84daa452e"),
                            HostsId = new Guid("865c578c-856b-4792-9c71-5d3fc1448999")
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5bf60ce2-7cc9-480e-a426-a4de4a658e0c"),
                            SubDomain = "",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("8fc843af-e4ed-4687-80ea-be5de2b2def0"),
                            SubDomain = "www",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("9ff5c8c9-9cf9-4d32-9c00-81d84daa452e"),
                            SubDomain = "www3",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("531ba7b4-d33a-4833-9c1c-f09c4802657e"),
                            SubDomain = "help",
                            TopDomain = "topdomain.target"
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("IPv4Raw")
                        .HasMaxLength(4)
                        .HasColumnType("bytea");

                    b.Property<byte[]>("IPv6Raw")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f897068-ec0b-4da6-9a3c-83af67b8de72"),
                            IPv4Raw = new byte[] { 127, 0, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("c61ef333-984d-4dfd-853b-55d2f79d6257"),
                            IPv4Raw = new byte[] { 192, 168, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("865c578c-856b-4792-9c71-5d3fc1448999"),
                            IPv4Raw = new byte[] { 10, 10, 0, 123 }
                        },
                        new
                        {
                            Id = new Guid("fcf50edf-cc3a-4d06-98fc-94247950344e"),
                            IPv6Raw = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PortState")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Ports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7cab4eae-e6d9-43bf-b82a-1bbe3e035290"),
                            HostId = new Guid("c61ef333-984d-4dfd-853b-55d2f79d6257"),
                            PortNumber = 22,
                            ServiceName = "OpenSSH"
                        });
                });

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenTestDataViewer.Api.Model.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Host", "Host")
                        .WithMany("Ports")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Host");
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Navigation("Ports");
                });
#pragma warning restore 612, 618
        }
    }
}
