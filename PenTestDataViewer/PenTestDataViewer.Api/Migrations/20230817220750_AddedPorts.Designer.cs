// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenTestDataViewer.Api.Database;

#nullable disable

namespace PenTestDataViewer.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230817220750_AddedPorts")]
    partial class AddedPorts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostsId")
                        .HasColumnType("uuid");

                    b.HasKey("DomainsId", "HostsId");

                    b.HasIndex("HostsId");

                    b.ToTable("DomainHost");

                    b.HasData(
                        new
                        {
                            DomainsId = new Guid("60bba9e2-ee4f-4a3c-b48a-7be68b4204f0"),
                            HostsId = new Guid("b88a1d05-6ba7-410c-8fb4-a789c43d9fa1")
                        },
                        new
                        {
                            DomainsId = new Guid("60bba9e2-ee4f-4a3c-b48a-7be68b4204f0"),
                            HostsId = new Guid("d45f3331-6c34-4184-9e5d-8dd47b94d10c")
                        },
                        new
                        {
                            DomainsId = new Guid("87a0e202-bc2a-40ea-88da-c1317f64bfde"),
                            HostsId = new Guid("11e4ea39-fa6e-4a76-81bf-060868c428cb")
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76a8dd3e-289c-44c0-abdb-0d69851a5b41"),
                            SubDomain = "",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("60bba9e2-ee4f-4a3c-b48a-7be68b4204f0"),
                            SubDomain = "www",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("87a0e202-bc2a-40ea-88da-c1317f64bfde"),
                            SubDomain = "www3",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("71963fbd-26b3-4a31-8887-1bc060f7b534"),
                            SubDomain = "help",
                            TopDomain = "topdomain.target"
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("IPv4Raw")
                        .HasMaxLength(4)
                        .HasColumnType("bytea");

                    b.Property<byte[]>("IPv6Raw")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b88a1d05-6ba7-410c-8fb4-a789c43d9fa1"),
                            IPv4Raw = new byte[] { 127, 0, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("d45f3331-6c34-4184-9e5d-8dd47b94d10c"),
                            IPv4Raw = new byte[] { 192, 168, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("11e4ea39-fa6e-4a76-81bf-060868c428cb"),
                            IPv4Raw = new byte[] { 10, 10, 0, 123 }
                        },
                        new
                        {
                            Id = new Guid("cf3e62db-4136-4f7b-a17b-bf92ff7846f4"),
                            IPv6Raw = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PortState")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenTestDataViewer.Api.Model.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Host", "Host")
                        .WithMany("Ports")
                        .HasForeignKey("HostId");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Navigation("Ports");
                });
#pragma warning restore 612, 618
        }
    }
}
