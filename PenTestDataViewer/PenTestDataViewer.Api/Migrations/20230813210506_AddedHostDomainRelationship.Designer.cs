// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenTestDataViewer.Api.Database;

#nullable disable

namespace PenTestDataViewer.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230813210506_AddedHostDomainRelationship")]
    partial class AddedHostDomainRelationship
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostsId")
                        .HasColumnType("uuid");

                    b.HasKey("DomainsId", "HostsId");

                    b.HasIndex("HostsId");

                    b.ToTable("DomainHost");
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c5520171-ab2b-4d9e-a60f-f737397e6c2b"),
                            SubDomain = "",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("6050882b-bf02-49dd-aa3c-1f0014756bd3"),
                            SubDomain = "www",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("4b21181a-7f73-4611-b245-70a53c071481"),
                            SubDomain = "www3",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("0c25dfd0-feaf-4b47-ac7c-b1cc69d600e5"),
                            SubDomain = "help",
                            TopDomain = "topdomain.target"
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("IPv4Raw")
                        .HasMaxLength(4)
                        .HasColumnType("bytea");

                    b.Property<byte[]>("IPv6Raw")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2642c291-9e6c-40cb-9241-cd0ec6841ee5"),
                            IPv4Raw = new byte[] { 127, 0, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("79ea535a-bdb2-455a-aa57-4f59f82b1e13"),
                            IPv4Raw = new byte[] { 192, 168, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("12cb6f16-d803-476b-ae3d-90e044830211"),
                            IPv4Raw = new byte[] { 10, 10, 0, 123 }
                        },
                        new
                        {
                            Id = new Guid("22286774-3e34-4871-aaa3-b11edf074084"),
                            IPv6Raw = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
                        });
                });

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenTestDataViewer.Api.Model.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
