// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenTestDataViewer.Api.Database;

#nullable disable

namespace PenTestDataViewer.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230822204049_ChangedIPDataType")]
    partial class ChangedIPDataType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostsId")
                        .HasColumnType("uuid");

                    b.HasKey("DomainsId", "HostsId");

                    b.HasIndex("HostsId");

                    b.ToTable("DomainHost");

                    b.HasData(
                        new
                        {
                            DomainsId = new Guid("9efced80-694e-4fea-b674-207752c2ee6d"),
                            HostsId = new Guid("f2c68b10-ad9f-4c64-b5fa-63c0f37638d9")
                        },
                        new
                        {
                            DomainsId = new Guid("9efced80-694e-4fea-b674-207752c2ee6d"),
                            HostsId = new Guid("59f14efd-d068-40db-8c90-b5bdcfdfc8fb")
                        },
                        new
                        {
                            DomainsId = new Guid("b5a5f65a-71ea-494b-a396-4759c303be38"),
                            HostsId = new Guid("d38b198e-294c-4f4d-a924-be890cb2fac1")
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f75e0bc-eaca-4483-b704-714703d02fdc"),
                            SubDomain = "",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("9efced80-694e-4fea-b674-207752c2ee6d"),
                            SubDomain = "www",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("b5a5f65a-71ea-494b-a396-4759c303be38"),
                            SubDomain = "www3",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("4f9e1cd1-5333-4d01-864a-e99957471d0c"),
                            SubDomain = "help",
                            TopDomain = "topdomain.target"
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IPv4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IPv6")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2c68b10-ad9f-4c64-b5fa-63c0f37638d9"),
                            IPv4 = "127.0.0.1",
                            IPv6 = "",
                            OS = ""
                        },
                        new
                        {
                            Id = new Guid("59f14efd-d068-40db-8c90-b5bdcfdfc8fb"),
                            IPv4 = "192.168.0.1",
                            IPv6 = "",
                            OS = ""
                        },
                        new
                        {
                            Id = new Guid("d38b198e-294c-4f4d-a924-be890cb2fac1"),
                            IPv4 = "10.10.0.123",
                            IPv6 = "",
                            OS = ""
                        },
                        new
                        {
                            Id = new Guid("79411d04-4f19-42e7-a5ef-d7eccea6f87e"),
                            IPv4 = "",
                            IPv6 = "::1",
                            OS = ""
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("PortState")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("Ports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36b80a1f-b61f-49af-a1cf-d329230648d1"),
                            HostId = new Guid("59f14efd-d068-40db-8c90-b5bdcfdfc8fb"),
                            PortNumber = 22,
                            ServiceName = "OpenSSH"
                        });
                });

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenTestDataViewer.Api.Model.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Port", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Host", "Host")
                        .WithMany("Ports")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Host");
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Navigation("Ports");
                });
#pragma warning restore 612, 618
        }
    }
}
