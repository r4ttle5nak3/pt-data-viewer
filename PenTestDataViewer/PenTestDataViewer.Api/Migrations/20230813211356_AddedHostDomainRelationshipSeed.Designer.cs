// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PenTestDataViewer.Api.Database;

#nullable disable

namespace PenTestDataViewer.Api.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230813211356_AddedHostDomainRelationshipSeed")]
    partial class AddedHostDomainRelationshipSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HostsId")
                        .HasColumnType("uuid");

                    b.HasKey("DomainsId", "HostsId");

                    b.HasIndex("HostsId");

                    b.ToTable("DomainHost");

                    b.HasData(
                        new
                        {
                            DomainsId = new Guid("01f250d3-5fc5-4da5-a829-4d9980004e67"),
                            HostsId = new Guid("95a18487-4fa7-49b4-add4-e82b3ca19d84")
                        },
                        new
                        {
                            DomainsId = new Guid("01f250d3-5fc5-4da5-a829-4d9980004e67"),
                            HostsId = new Guid("5b7f6dbe-ca2a-4a74-97ed-e97c3c6e1021")
                        },
                        new
                        {
                            DomainsId = new Guid("20ce39a4-1376-456d-939e-68f0138a8a65"),
                            HostsId = new Guid("b69d190f-688a-47bf-a5af-737534944d54")
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SubDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TopDomain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Domains");

                    b.HasData(
                        new
                        {
                            Id = new Guid("363f27c5-3240-4750-b22e-854e2090ba65"),
                            SubDomain = "",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("01f250d3-5fc5-4da5-a829-4d9980004e67"),
                            SubDomain = "www",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("20ce39a4-1376-456d-939e-68f0138a8a65"),
                            SubDomain = "www3",
                            TopDomain = "topdomain.target"
                        },
                        new
                        {
                            Id = new Guid("7aecb88b-f70b-404c-8f9b-ad177b1c3ae4"),
                            SubDomain = "help",
                            TopDomain = "topdomain.target"
                        });
                });

            modelBuilder.Entity("PenTestDataViewer.Api.Model.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("IPv4Raw")
                        .HasMaxLength(4)
                        .HasColumnType("bytea");

                    b.Property<byte[]>("IPv6Raw")
                        .HasMaxLength(16)
                        .HasColumnType("bytea");

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95a18487-4fa7-49b4-add4-e82b3ca19d84"),
                            IPv4Raw = new byte[] { 127, 0, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("5b7f6dbe-ca2a-4a74-97ed-e97c3c6e1021"),
                            IPv4Raw = new byte[] { 192, 168, 0, 1 }
                        },
                        new
                        {
                            Id = new Guid("b69d190f-688a-47bf-a5af-737534944d54"),
                            IPv4Raw = new byte[] { 10, 10, 0, 123 }
                        },
                        new
                        {
                            Id = new Guid("e7d340d2-c331-4833-8753-ae338767cdab"),
                            IPv6Raw = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }
                        });
                });

            modelBuilder.Entity("DomainHost", b =>
                {
                    b.HasOne("PenTestDataViewer.Api.Model.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenTestDataViewer.Api.Model.Host", null)
                        .WithMany()
                        .HasForeignKey("HostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
