using PenTestDataViewer.Api.DataTransferModel.Host;
using System.Reflection;
using System.Xml;

namespace PenTestDataViewer.Api.Services.Import
{
    public class NmapXmlParser : INmapXmlParser
    {
        private readonly XmlReaderSettings _readerSettings;
        private readonly ILogger<NmapXmlParser> _logger;

        private readonly List<HostDto> _hosts = new();

        public List<HostDto> Hosts { get => _hosts; }

        public NmapXmlParser(ILogger<NmapXmlParser> logger)
        {
            _readerSettings = new XmlReaderSettings();
            _readerSettings.Async = true;
            _logger = logger;
        }

        public async Task<bool> TryReadFromStreamAsync(Stream stream)
        {
            try
            {
                using var reader = XmlReader.Create(stream, _readerSettings);
                while (await reader.ReadAsync())
                {
                    if (reader.NodeType == XmlNodeType.Element && reader.Name == "host")
                    {
                        await ReadHostInfo(reader);
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error while parsing Nmap xml file");
                return false;
            }

            return true;
        }

        private async Task ReadHostInfo(XmlReader reader)
        {
            var host = new HostDto();
            while (await reader.ReadAsync())
            {
                if (reader.Name == "host")
                {
                    break;
                }

                switch (reader.Name)
                {
                    case "address":
                        ReadHostAddress(reader, host);
                        break;
                    case "os":
                        await ReadHostOSAsync(reader, host);
                        break;
                    case "hostnames":
                        await ReadDomainNamesAsync(reader, host);
                        break;
                    case "ports":
                        await ReadPortsAsync(reader, host);
                        break;
                }
            }
            Hosts.Add(host);
        }

        private static async Task ReadPortsAsync(XmlReader reader, HostDto host)
        {
            var ports = new List<HostPortDto>();
            while (await reader.ReadAsync())
            {
                if (reader.Name == "ports")
                {
                    break;
                }

                if (reader.Name == "port")
                {
                    var port = new HostPortDto();
                    if (int.TryParse(reader.GetAttribute("portid"), out int portNumber))
                    {
                        port.PortNumber = portNumber;
                    }

                    while (await reader.ReadAsync())
                    {
                        if (reader.Name == "port")
                        {
                            break;
                        }

                        if (reader.NodeType == XmlNodeType.EndElement)
                        {
                            continue;
                        }

                        switch (reader.Name)
                        {
                            case "state":
                                ReadPortState(reader, port);
                                break;
                            case "service":
                                ReadPortService(reader, port);
                                break;
                        }
                    }
                    ports.Add(port);
                }
            }
            host.Ports = ports;
        }

        private static void ReadPortService(XmlReader reader, HostPortDto port)
        {
            var product = reader.GetAttribute("product");
            var version = reader.GetAttribute("version");
            if (!string.IsNullOrWhiteSpace(version))
            {
                port.ServiceName = $"{product} {version}";
            }
            else
            {
                port.ServiceName = product;
            }
        }

        private static void ReadPortState(XmlReader reader, HostPortDto port)
        {
            var state = reader.GetAttribute("state");
            switch (state)
            {
                case "open":
                    port.PortState = Model.Port.State.Open;
                    break;
                case "open|filtered":
                    port.PortState = Model.Port.State.OpenFiltered;
                    break;
                case "closed":
                    port.PortState = Model.Port.State.Closed;
                    break;
                case "closed|filtered":
                    port.PortState = Model.Port.State.CloedFiltered;
                    break;
                case "filtered":
                    port.PortState = Model.Port.State.Filtered;
                    break;
                case "unfiltered":
                    port.PortState = Model.Port.State.Unfiltered;
                    break;
            }
        }

        private static async Task ReadDomainNamesAsync(XmlReader reader, HostDto host)
        {
            var domains = new List<HostDomainDto>();
            while (await reader.ReadAsync())
            {
                if (reader.Name == "hostnames")
                {
                    break;
                }

                if (reader.Name == "hostname")
                {

                    domains.Add(new HostDomainDto { Name = reader.GetAttribute("name") });
                }
            }
            host.Domains = domains;
        }

        private static async Task ReadHostOSAsync(XmlReader reader, HostDto host)
        {
            var kernel = string.Empty;
            var osName = string.Empty;

            while (await reader.ReadAsync())
            {
                if (reader.Name == "os")
                {
                    break;
                }

                switch (reader.Name)
                {
                    case "osclass":
                        while (await reader.ReadAsync())
                        {
                            if (reader.Name == "osclass")
                            {
                                break;
                            }

                            if (reader.Name == "cpe" && string.IsNullOrEmpty(kernel))
                            {
                                await reader.ReadAsync();
                                kernel = reader.Value;
                            }
                        }
                        break;
                    case "osmatch":
                        osName = reader.GetAttribute("name");
                        break;
                }
            }

            if (!string.IsNullOrWhiteSpace(kernel))
            {
                osName += " Kernel: " + kernel;
            }
            host.OS = osName;
        }

        private void ReadHostAddress(XmlReader reader, HostDto host)
        {
            var address = reader.GetAttribute("addr");
            var addressType = reader.GetAttribute("addrtype");
            switch (addressType)
            {
                case "ipv4":
                    host.IPv4 = address;
                    break;
                case "ipv6":
                    host.IPv6 = address;
                    break;
                case "mac":
                    // Mac address is not recognized for now
                    break;
                default:
                    _logger.LogError("Unknown host address type: {0} ({1})", addressType, address);
                    break;
            }
        }

        public void Dispose()
        {
            _hosts.Clear();
        }
    }
}
