using Microsoft.EntityFrameworkCore;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Host;
using PenTestDataViewer.Api.Model;

namespace PenTestDataViewer.Api.Services.Repositories
{
    public class HostsRepositoryService : IHostsRepositoryService
    {
        private readonly DatabaseContext _context;

        public HostsRepositoryService(DatabaseContext context)
        {
            _context = context;
        }

        public async Task<IEnumerable<HostDto>> GetHostsAsync(int start = 0, int pageSize = 0, string ipv4 = "", string ipv6 = "", string service = "", int port = -1)
        {
            IQueryable<Model.Host> query;

            if (port > -1 || !string.IsNullOrWhiteSpace(service))
            {
                query = GetHostsByPortsAsync(port, service);
            }
            else
            {
                query = _context.Hosts
                .Include(entity => entity.Domains)
                .Include(entity => entity.Ports);

            }

            var result = (await query
                .Select(entity => HostDto.FromDatabaseModel(entity))
                .AsNoTracking()
                .ToListAsync()).AsEnumerable();

            if (result == null)
            {
                return new List<HostDto>();
            }

            result = result
                .Where(dto => dto.IPv4!.ToString().Contains(ipv4))
                .Where(dto => dto.IPv6!.ToString().Contains(ipv6));


            if (pageSize > 0)
            {
                result = result.Skip(start).Take(pageSize);
            }

            return result;
        }

        public async Task<HostDto> GetHost(Guid id)
        {
            var host = await _context.Hosts
                .Include(entity => entity.Domains)
                .Include(entity => entity.Ports)
                .FirstOrDefaultAsync(entity => entity.Id == id);


            return HostDto.FromDatabaseModel(host);
        }

        private IQueryable<Model.Host> GetHostsByPortsAsync(int portNumber, string service)
        {
            var initialQuery = _context.Ports
                .Include(p => p.Host)
                .Include(p => p.Host.Domains)
                .Include(p => p.Host.Ports);

            IQueryable<Port> query = null;
            if (portNumber > 0)
            {
                query = initialQuery.Where(p => p.PortNumber.Equals(portNumber));
            }

            if (!string.IsNullOrWhiteSpace(service))
            {
                query = query == null
                ? initialQuery.Where(p => p.ServiceName.Contains(service))
                : query.Where(p => p.ServiceName.Contains(service));
            }

            if (query == null)
            {
                query = initialQuery;
            }

            return query.Select(p => p.Host);
        }
    }
}
