using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using PenTestDataViewer.Api.Controllers;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.Model;
using System.Data.Common;
using System.Net;

namespace PenTestDataViewer.Api.Tests.Controllers
{
    public class HostControllerTests : IDisposable
    {
        private DbConnection _connection;
        private DbContextOptions<DatabaseContext> _contextOptions;

        public HostControllerTests()
        {
            _connection = new SqliteConnection("Filename=:memory:");
            _connection.Open();

            _contextOptions = new DbContextOptionsBuilder<DatabaseContext>().UseSqlite(_connection).Options;

            using var context = new DatabaseContext(_contextOptions);

            if (context.Database.EnsureCreated())
            {
                using var viewCommand = context.Database.GetDbConnection().CreateCommand();
                viewCommand.CommandText = @"
CREATE VIEW AllResources AS
SELECT TopDomain
FROM Hosts;"
                ;
                viewCommand.ExecuteNonQuery();
            }
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.SaveChanges();
            
        }

        DatabaseContext CreateContext() => new DatabaseContext(_contextOptions);

        [Fact]
        public async Task GetHosts_Should_Return_All_Hosts_Async()
        {
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 192, 168, 0, 1 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 10, 10, 0, 10 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 192, 168, 0, 12 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 175, 54, 5, 50 } },
                new Host { Id = Guid.NewGuid(), IPv6Raw = IPAddress.Parse("::1").GetAddressBytes() },
                new Host { Id = Guid.NewGuid(), IPv6Raw = IPAddress.Parse("fe80::4cc5:6436:24bc:92bc").GetAddressBytes() }
                );
            context.SaveChanges();
            var controller = new HostsController(context);

            var hosts = await controller.GetHosts();

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.Equal(6, hosts.Value.Count());

            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.SaveChanges();
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_IPv4_Hosts_Async()
        {
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 192, 168, 0, 1 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 10, 10, 0, 10 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 192, 168, 0, 12 } },
                new Host { Id = Guid.NewGuid(), IPv4Raw = new byte[] { 175, 54, 5, 50 } },
                new Host { Id = Guid.NewGuid(), IPv6Raw = IPAddress.Parse("::1").GetAddressBytes() },
                new Host { Id = Guid.NewGuid(), IPv6Raw = IPAddress.Parse("fe80::4cc5:6436:24bc:92bc").GetAddressBytes() }
                );
            context.SaveChanges();
            var controller = new HostsController(context);

            var hosts = await controller.GetHosts(ipv4: "192.168");

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.Equal(2, hosts.Value.Count());

            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.SaveChanges();
        }


        public void Dispose() => _connection.Dispose();
    }
}
