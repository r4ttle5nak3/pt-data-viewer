using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using PenTestDataViewer.Api.Controllers;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Domain;
using PenTestDataViewer.Api.Model;
using System.Data.Common;

namespace PenTestDataViewer.Api.Tests.Controllers
{
    public class DomainsControllerTests : IDisposable
    {
        private DbConnection _connection;
        private DbContextOptions<DatabaseContext> _contextOptions;

        public DomainsControllerTests()
        {
            _connection = new SqliteConnection("Filename=:memory:");
            _connection.Open();

            _contextOptions = new DbContextOptionsBuilder<DatabaseContext>().UseSqlite(_connection).Options;

            using var context = new DatabaseContext(_contextOptions);

            if (context.Database.EnsureCreated())
            {
                using var viewCommand = context.Database.GetDbConnection().CreateCommand();
                viewCommand.CommandText = @"
CREATE VIEW AllResources AS
SELECT TopDomain
FROM Domains;"
                ;
                viewCommand.ExecuteNonQuery();
            }
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
            
        }

        DatabaseContext CreateContext() => new DatabaseContext(_contextOptions);

        [Fact]
        public async Task GetDomains_Should_Return_All_Domains_Async()
        {
            var context = CreateContext();
            context.AddRange(
                new Domain { TopDomain = "top.domain", SubDomain = string.Empty },
                new Domain { TopDomain = "top.domain", SubDomain = "www" },
                new Domain { TopDomain = "top.domain2", SubDomain = string.Empty }
                );
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domains = await controller.GetDomains(null, null);

            Assert.NotNull(domains);
            Assert.NotNull(domains.Result as OkObjectResult);
            var resultValue = ((OkObjectResult)domains.Result).Value as IEnumerable<DomainDto>;
            Assert.NotNull(resultValue);
            Assert.Equal(3, resultValue.Count());
        }

        [Fact]
        public async Task GetDomains_Should_Return_Queried_TopDomains_Async()
        {
            var context = CreateContext();
            context.AddRange(
                new Domain { TopDomain = "top.domain", SubDomain = string.Empty },
                new Domain { TopDomain = "top.domain", SubDomain = "www" },
                new Domain { TopDomain = "different.domain", SubDomain = string.Empty }
                );
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domains = await controller.GetDomains("top.d", null);

            Assert.NotNull(domains);
            Assert.NotNull(domains.Result as OkObjectResult);
            var resultValue = ((OkObjectResult)domains.Result).Value as IEnumerable<DomainDto>;
            Assert.NotNull(resultValue);
            Assert.Equal(2, resultValue.Count());
        }

        [Fact]
        public async Task GetDomains_Should_Return_Queried_SubDomains_Async()
        {
            var context = CreateContext();
            context.AddRange(
                new Domain { TopDomain = "top.domain", SubDomain = string.Empty },
                new Domain { TopDomain = "top.domain", SubDomain = "www" },
                new Domain { TopDomain = "different.domain", SubDomain = string.Empty }
                );
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domains = await controller.GetDomains(null, "ww");

            Assert.NotNull(domains);
            Assert.NotNull(domains.Result as OkObjectResult);
            var resultValue = ((OkObjectResult)domains.Result).Value as IEnumerable<DomainDto>;
            Assert.NotNull(resultValue);
            Assert.Single(resultValue);
        }

        [Fact]
        public async Task GetDomains_Should_Return_Domains_With_Hosts_Async()
        {
            var context = CreateContext();
            var dbHost = new Host { IPv4Raw = new byte[] { 192, 168, 0, 1 } };
            var dbDomains = new[]
            {
                new Domain { TopDomain="domain.test", SubDomain="" },
                new Domain { TopDomain="domain.test", SubDomain="helpcenter" }
            };
            dbHost.Domains.AddRange(dbDomains);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domains = await controller.GetDomains(null, null);

            Assert.NotNull(domains);
            Assert.NotNull(domains.Result as OkObjectResult);
            var resultValue = ((OkObjectResult)domains.Result).Value as IEnumerable<DomainDto>;
            Assert.NotNull(resultValue);
            Assert.Single(resultValue.First().Hosts);
        }

        [Fact]
        public async Task GetDomain_Should_Return_Single_Domain_Async()
        {
            var context = CreateContext();
            var fetchedGuid = Guid.NewGuid();
            context.AddRange(
                new Domain { TopDomain = "top.domain", SubDomain = string.Empty },
                new Domain { Id = fetchedGuid, TopDomain = "top.domain", SubDomain = "www" },
                new Domain { TopDomain = "different.domain", SubDomain = string.Empty }
                );
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domain = await controller.GetDomain(fetchedGuid);

            Assert.NotNull(domain);
            Assert.NotNull(domain.Value);
            Assert.Equal(fetchedGuid, domain.Value.Id);
        }

        [Fact]
        public async Task GetDomain_Should_Return_Single_Domain_With_Host_Async()
        {
            var context = CreateContext();
            var dbHosts = new[] {
                new Host { IPv4Raw = new byte[] { 192, 168, 0, 1 } },
            };
            var fetchedGuid = Guid.NewGuid();
            var dbDomains = new[]
            {
                new Domain { TopDomain="domain.test", SubDomain="" },
                new Domain { Id = fetchedGuid, TopDomain="domain.test", SubDomain="helpcenter" }
            };
            dbHosts[0].Domains.AddRange(dbDomains);
            await context.Hosts.AddRangeAsync(dbHosts);
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var domain = await controller.GetDomain(fetchedGuid);

            Assert.NotNull(domain);
            Assert.NotNull(domain.Value);
            Assert.Single(domain.Value.Hosts);
        }

        [Fact]
        public async Task PostDomain_Should_Add_Single_Domain_Async()
        {
            var context = CreateContext();
            var controller = new DomainsController(context);

            var newDomain = new DomainDto
            {
                TopDomain = "top.domain",
                SubDomain = "sub.domain",
            };

            var domain = await controller.PostDomain(newDomain);

            Assert.NotNull(domain);
            var result = domain.Result as CreatedAtActionResult;
            Assert.NotNull(result);
            var retunedDomain = result.Value as Domain;
            Assert.NotNull(retunedDomain);
            Assert.NotNull(retunedDomain.Id);
            Assert.NotEqual(Guid.Empty, retunedDomain.Id);
        }

        [Fact]
        public async Task PostDomain_Should_Add_Single_Domain_With_Host_Async()
        {
            var context = CreateContext();
            var controller = new DomainsController(context);

            var newDomain = new DomainDto
            {
                TopDomain = "top.domain",
                SubDomain = "sub.domain",
                Hosts = new List<DomainHostDto>
                {
                     new DomainHostDto { IPv4 = "192.168.2.13" }
                }
            };

            var domain = await controller.PostDomain(newDomain);

            Assert.NotNull(domain);
            var result = domain.Result as CreatedAtActionResult;
            Assert.NotNull(result);
            var retunedDomain = result.Value as Domain;
            Assert.NotNull(retunedDomain);
            Assert.NotNull(retunedDomain.Id);
            Assert.Equal(newDomain.Name, retunedDomain.Name);
            Assert.Single(retunedDomain.Hosts);
            Assert.Equal("192.168.2.13", retunedDomain.Hosts.First().IPv4.ToString());

            var addedDomain = context.Domains
                 .Include(d => d.Hosts)
                .AsNoTracking()
                .FirstOrDefault();
            Assert.NotNull(addedDomain);
            Assert.Equal(newDomain.Name, addedDomain.Name);
            Assert.NotEmpty(addedDomain.Hosts);
            Assert.Equal("192.168.2.13", addedDomain.Hosts.First().IPv4.ToString());
        }

        [Fact]
        public async Task PutDomain_Should_Update_Single_Domain_Async()
        {
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            var dbDomains = new[]
            {
                new Domain { TopDomain="domain.test", SubDomain="" },
                new Domain { Id = changedGuid, TopDomain="domain.test", SubDomain="helpcenter" }
            };
            context.AddRange(dbDomains);
            await context.SaveChangesAsync();
            await context.DisposeAsync();
            context = CreateContext();
            var controller = new DomainsController(context);

            var newDomain = new DomainDto
            {
                Id = changedGuid,
                TopDomain = "top.domain",
                SubDomain = "sub.domain",
            };

            var domain = await controller.PutDomain(changedGuid, newDomain) as NoContentResult;

            Assert.NotNull(domain);

            var allDomains = await context.Domains
                .AsNoTracking()
                .ToArrayAsync();
            Assert.NotNull(allDomains);
            Assert.Equal(2, allDomains.Length);
            Assert.Equal(newDomain.Name, allDomains.FirstOrDefault(d => d.Id == changedGuid).Name);
        }

        [Fact]
        public async Task PutDomain_Should_Add_New_Hosts_To_Updated_Domain_Async()
        {
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            context.Add(new Domain { Id = changedGuid, Name = "new.domain"});
            await context.SaveChangesAsync();
            await context.DisposeAsync();
            context = CreateContext();
            var controller = new DomainsController(context);

            var changedDomain = new DomainDto
            {
                Id = changedGuid,
                TopDomain = "top.domain",
                SubDomain = "sub.domain",
                Hosts = new List<DomainHostDto>()
                {
                    new DomainHostDto { IPv4 = "123.45.6.78" }
                }
            };

            var domain = await controller.PutDomain(changedGuid, changedDomain) as NoContentResult;

            Assert.NotNull(domain);

            var updatedDomain = await context.Domains
                 .Include(h => h.Hosts)
                .AsNoTracking()
                .FirstAsync();
            Assert.NotNull(updatedDomain);
            Assert.Single(updatedDomain.Hosts);
            var hosts = await context.Hosts
               .Include(d => d.Domains)
                .AsNoTracking()
                .ToArrayAsync();
            Assert.Single(hosts);
        }

        [Fact]
        public async Task PutDomain_Should_Add_Existing_Host_To_Updated_Domain_Async()
        {
            var context = CreateContext();
            var hostGuid = Guid.NewGuid();
            var dbHosts = new[]{
                new Host { IPv4Raw = new byte[] { 192, 168, 0, 1 } },
                new Host { Id = hostGuid, IPv4Raw = new byte[] { 192, 168, 0, 1 } },
            };
            await context.Hosts.AddRangeAsync(dbHosts);

            var domainGuid = Guid.NewGuid();
            await context.Domains.AddAsync(new Domain { Id = domainGuid, TopDomain = "domain.test", SubDomain = "helpcenter" });
            await context.SaveChangesAsync();
            await context.DisposeAsync();

            context = CreateContext();
            var controller = new DomainsController(context);

            var changedDomain = new DomainDto
            {
                Id = domainGuid,
                TopDomain = "top.domain",
                SubDomain = "sub.domain",
                Hosts = new List<DomainHostDto>()
                {
                    new DomainHostDto { Id = hostGuid, IPv4 = "192.168.0.1" }
                }
            };

            var domain = await controller.PutDomain(domainGuid, changedDomain) as NoContentResult;

            Assert.NotNull(domain);

            var updatedDomain = await context.Domains
                .Include(h => h.Hosts)
                .AsNoTracking()
                .FirstAsync(h => h.Id == domainGuid);
            Assert.NotNull(updatedDomain);
            Assert.Single(updatedDomain.Hosts);

            var hosts = await context.Hosts
                .AsNoTracking()
                .ToArrayAsync();
            Assert.Equal(2, hosts.Length);
        }

        [Fact]
        public async Task DeleteDomain_Should_Delete_Single_Domain_Async()
        {
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            var dbDomains = new[]
            {
                new Domain { TopDomain="domain.test", SubDomain="" },
                new Domain { Id = changedGuid, TopDomain="domain.test", SubDomain="helpcenter" },
                new Domain { TopDomain="domain.test", SubDomain="www" }
            };
            context.AddRange(dbDomains);
            await context.SaveChangesAsync();
            await context.DisposeAsync();

            context = CreateContext();
            var controller = new DomainsController(context);

            var result = await controller.DeleteDomain(changedGuid) as NoContentResult;

            Assert.Equal(204, result!.StatusCode);
            var remainingDomains = await context.Domains
                .AsNoTracking()
                .ToListAsync();
            Assert.Equal(2, remainingDomains.Count);
            Assert.DoesNotContain(remainingDomains, h => h.Id == changedGuid);
        }

        [Fact]
        public async Task DeleteDomain_Should_Not_Delete_Linked_Host_Async()
        {
            var context = CreateContext();
            var deletedHostGuid = Guid.NewGuid();
            var domain = new Host
            {
                IPv4Raw = new byte[] { 10, 10, 0, 10 }
            };
            domain.Domains.Add(new Domain { Id = deletedHostGuid, TopDomain = "top.domain2", SubDomain = "" });
            await context.AddAsync(domain);
            await context.SaveChangesAsync();
            var controller = new DomainsController(context);

            var result = await controller.DeleteDomain(deletedHostGuid) as NoContentResult;

            Assert.Equal(204, result!.StatusCode);
            var remainingHosts = await context.Domains
                .AsNoTracking()
                .ToListAsync();
            Assert.Empty(remainingHosts);
            var remainingDomains = await context.Hosts
               .AsNoTracking()
                .ToListAsync();
            Assert.Contains(remainingDomains, d => string.Equals(d.IPv4.ToString(), "10.10.0.10"));
        }

        public void Dispose()
        {
            var context = CreateContext();
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
            _connection.Dispose();
        }
    }
}
