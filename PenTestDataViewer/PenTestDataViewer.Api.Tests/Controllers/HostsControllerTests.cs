using Microsoft.AspNetCore.Mvc;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Moq;
using PenTestDataViewer.Api.Controllers;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.DataTransferModel.Host;
using PenTestDataViewer.Api.Model;
using PenTestDataViewer.Api.Services.Import;
using PenTestDataViewer.Api.Services.Repositories;
using System.Data.Common;
using System.Net;

namespace PenTestDataViewer.Api.Tests.Controllers
{
    public class HostsControllerTests : IDisposable
    {
        private DbConnection _connection;
        private DbContextOptions<DatabaseContext> _contextOptions;

        public HostsControllerTests()
        {
            _connection = new SqliteConnection("Filename=:memory:");
            _connection.Open();

            _contextOptions = new DbContextOptionsBuilder<DatabaseContext>().UseSqlite(_connection).Options;

            using var context = new DatabaseContext(_contextOptions);

            if (context.Database.EnsureCreated())
            {
                using var viewCommand = context.Database.GetDbConnection().CreateCommand();
                viewCommand.CommandText = @"
CREATE VIEW AllResources AS
SELECT IPv4Raw
FROM Hosts;"
                ;
                viewCommand.ExecuteNonQuery();
            }
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
            
        }

        DatabaseContext CreateContext() => new DatabaseContext(_contextOptions);

        [Fact]
        public async Task GetHosts_Should_Return_All_Hosts_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.10.0.10" },
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var hosts = await controller.GetHosts();

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.Equal(6, hosts.Value.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_IPv4_Hosts_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.10.0.10" },
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var hosts = await controller.GetHosts(ipv4: "192.168");

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.Equal(2, hosts.Value.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_IPv6_Hosts_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.10.0.10" },
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var hosts = await controller.GetHosts(ipv6: "92bc");

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.Single(hosts.Value);
        }

        [Fact]
        public async Task GetHosts_Should_Return_Hosts_With_Domains_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var dbHost = new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty };
            var dbDomains = new[]
            {
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="" },
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="helpcenter" }
            };
            dbHost.Domains.AddRange(dbDomains);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var hosts = await controller.GetHosts();

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.NotEmpty(hosts.Value.First().Domains);
            Assert.Equal(2, hosts.Value.First().Domains.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Hosts_With_Ports_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var dbHost = new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty };
            var dbPorts = new[]
            {
                new Port { PortNumber=22, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=80, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=8080, PortState=Port.State.Open, ServiceName=string.Empty },
            };
            dbHost.Ports.AddRange(dbPorts);
            await context.AddRangeAsync(dbPorts);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var hosts = await controller.GetHosts();

            Assert.NotNull(hosts);
            Assert.NotNull(hosts.Value);
            Assert.NotEmpty(hosts.Value.First().Ports);
            Assert.Equal(3, hosts.Value.First().Ports.Count());
        }

        [Fact]
        public async Task GetHost_Should_Return_Single_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var fetchedGuid = Guid.NewGuid();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.10.0.10" },
                new Host { Id = fetchedGuid, IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var host = await controller.GetHost(fetchedGuid);

            Assert.NotNull(host);
            Assert.NotNull(host.Value);
            Assert.Equal(fetchedGuid, host.Value.Id);
        }

        [Fact]
        public async Task GetHost_Should_Return_Single_Host_With_Domains_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var fetchedGuid = Guid.NewGuid();
            var dbHosts = new[]{
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = fetchedGuid, IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
            };
            var dbDomains = new[]
            {
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="" },
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="helpcenter" }
            };
            dbHosts[1].Domains.AddRange(dbDomains);
            await context.Hosts.AddRangeAsync(dbHosts);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var host = await controller.GetHost(fetchedGuid);

            Assert.NotNull(host);
            Assert.NotNull(host.Value);
            Assert.Equal(2, host.Value.Domains.Count());
        }

        [Fact]
        public async Task GetHost_Should_Return_Single_Host_With_Ports_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var fetchedGuid = Guid.NewGuid();
            var dbHost = new Host { Id = fetchedGuid, IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty };
            var dbPorts = new[]
            {
                new Port { PortNumber=22, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=80, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=8080, PortState=Port.State.Open, ServiceName=string.Empty },
            };
            dbHost.Ports.AddRange(dbPorts);
            await context.AddRangeAsync(dbPorts);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var host = await controller.GetHost(fetchedGuid);

            Assert.NotNull(host);
            Assert.NotNull(host.Value);
            Assert.Equal(3, host.Value.Ports.Count());
        }

        [Fact]
        public async Task PostHost_Should_Add_Single_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                IPv4 = "192.168.5.11", OS=string.Empty, IPv6=string.Empty
            };

            var host = await controller.PostHost(newHost);

            Assert.NotNull(host);
            var result = host.Result as CreatedAtActionResult;
            Assert.NotNull(result);
            var returnedHost = result.Value as HostDto;
            Assert.NotNull(returnedHost);
            Assert.NotNull(returnedHost.Id);
            Assert.Equal(newHost.IPv4, returnedHost.IPv4);
        }

        [Fact]
        public async Task PostHost_Should_Add_Single_Host_With_Domain_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                IPv4 = "192.168.5.11", OS=string.Empty, IPv6=string.Empty,
                Domains = new List<HostDomainDto>
                {
                    new HostDomainDto
                    {
                        TopDomain = "top.domain",
                        SubDomain = "subdomain"
                    }
                }
            };

            var host = await controller.PostHost(newHost);

            Assert.NotNull(host);
            var result = host.Result as CreatedAtActionResult;
            Assert.NotNull(result);
            var returnedHost = result.Value as HostDto;
            Assert.NotNull(returnedHost);
            Assert.NotNull(returnedHost.Id);
            Assert.Equal(newHost.IPv4, returnedHost.IPv4);
            Assert.NotEmpty(returnedHost.Domains);
            Assert.Equal("subdomain.top.domain", returnedHost.Domains.First().Name);

            var addedHost = context.Hosts
                .Include(h => h.Domains)
                .AsNoTracking()
                .FirstOrDefault();
            Assert.NotNull(addedHost);
            Assert.Equal(newHost.IPv4, addedHost.IPv4!.ToString());
            Assert.Empty(addedHost.IPv6);
            Assert.NotEmpty(addedHost.Domains);
            Assert.Equal("subdomain.top.domain", addedHost.Domains.First().Name);
        }

        [Fact]
        public async Task PostHost_Should_Add_Single_Host_With_Ports_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                IPv4 = "192.168.5.11", OS=string.Empty, IPv6=string.Empty,
                Ports = new List<HostPortDto>
                {
                    new HostPortDto
                    {
                        PortNumber = 80
                    },
                    new HostPortDto
                    {
                        PortNumber = 443
                    },
                    new HostPortDto
                    {
                        PortNumber = 8080
                    },
                }
            };

            var host = await controller.PostHost(newHost);

            Assert.NotNull(host);
            var result = host.Result as CreatedAtActionResult;
            Assert.NotNull(result);
            var returnedHost = result.Value as HostDto;
            Assert.NotNull(returnedHost);
            Assert.NotNull(returnedHost.Id);
            Assert.Equal(newHost.IPv4, returnedHost.IPv4);
            Assert.NotEmpty(returnedHost.Ports);
            Assert.Equal(3, returnedHost.Ports.Count);

            var addedHost = context.Hosts
                .Include(h => h.Ports)
                .AsNoTracking()
                .FirstOrDefault();
            Assert.NotNull(addedHost);
            Assert.Equal(newHost.IPv4, addedHost.IPv4!.ToString());
            Assert.Empty(addedHost.IPv6);
            Assert.NotEmpty(addedHost.Ports);
            Assert.Equal(3, addedHost.Ports.Count);
        }

        [Fact]
        public async Task PutHost_Should_Update_Single_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            context.AddRange(
                new Host { Id = changedGuid, IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            await context.DisposeAsync();
            context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                Id = changedGuid,
                IPv4 = "192.168.5.11", OS=string.Empty, IPv6=string.Empty
            };

            var host = await controller.PutHost(changedGuid, newHost) as NoContentResult;

            Assert.NotNull(host);

            var allHosts = await context.Hosts
                .Include(h => h.Domains)
                .AsNoTracking()
                .ToArrayAsync();
            Assert.NotNull(allHosts);
            Assert.Equal(4, allHosts.Length);
            Assert.Equal("192.168.5.11", allHosts.FirstOrDefault(h => h.Id == changedGuid)!.IPv4.ToString());
        }

        [Fact]
        public async Task PutHost_Should_Add_New_Domains_To_Updated_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            context.Add(new Host { Id = changedGuid, IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty });
            await context.SaveChangesAsync();
            await context.DisposeAsync();
            context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                Id = changedGuid,
                IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty,
                Domains = new List<HostDomainDto>
                {
                    new HostDomainDto { TopDomain="new.domain", SubDomain=""},
                    new HostDomainDto { TopDomain="new.domain", SubDomain="www"},
                }
            };

            var host = await controller.PutHost(changedGuid, newHost) as NoContentResult;

            Assert.NotNull(host);

            var updatedHost = await context.Hosts
                .Include(h => h.Domains)
                .AsNoTracking()
                .FirstAsync();
            Assert.NotNull(updatedHost);
            Assert.Equal(2, updatedHost.Domains.Count);
            var domains = await context.Domains
                .Include(d => d.Hosts)
                .AsNoTracking()
                .ToArrayAsync();
            Assert.Equal(2, domains.Length);
        }

        [Fact]
        public async Task PutHost_Should_Add_Existing_Domains_To_Updated_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            var dbHosts = new[]{
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = changedGuid, IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
            };
            await context.Hosts.AddRangeAsync(dbHosts);

            var domainGuid = Guid.NewGuid();
            await context.Domains.AddAsync(new Domain { Id = domainGuid, TopDomain = "domain.test", SubDomain = "helpcenter" });
            await context.SaveChangesAsync();
            await context.DisposeAsync();

            context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                Id = changedGuid,
                IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty,
                Domains = new List<HostDomainDto>
                {
                    HostDomainDto.FromDatabaseModel(new Domain { Id = domainGuid, TopDomain="domain.test", SubDomain="helpcenter" })
                }
            };

            var host = await controller.PutHost(changedGuid, newHost) as NoContentResult;

            Assert.NotNull(host);

            var updatedHost = await context.Hosts
                .Include(h => h.Domains)
                .AsNoTracking()
                .FirstAsync(h => h.Id == changedGuid);
            Assert.NotNull(updatedHost);
            Assert.Single(updatedHost.Domains);
            var domains = await context.Domains
                .Include(d => d.Hosts)
                .AsNoTracking()
                .ToArrayAsync();
            Assert.Single(updatedHost.Domains);
        }

        [Fact]
        public async Task PutHost_Should_Add_New_Ports_To_Updated_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var changedGuid = Guid.NewGuid();
            context.Add(new Host { Id = changedGuid, IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty });
            await context.SaveChangesAsync();
            await context.DisposeAsync();
            context = CreateContext();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var newHost = new HostDto
            {
                Id = changedGuid,
                IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty,
                Ports = new List<HostPortDto>
                {
                    new HostPortDto
                    {
                        PortNumber = 80
                    },
                    new HostPortDto
                    {
                        PortNumber = 443
                    },
                    new HostPortDto
                    {
                        PortNumber = 8080
                    },
                }
            };

            var host = await controller.PutHost(changedGuid, newHost) as NoContentResult;

            Assert.NotNull(host);

            var updatedHost = await context.Hosts
                .Include(h => h.Ports)
                .AsNoTracking()
                .FirstAsync();
            Assert.NotNull(updatedHost);
            Assert.Equal(3, updatedHost.Ports.Count);
        }

        [Fact]
        public async Task DeleteHost_Should_Delete_Single_Host_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var deletedHostGuid = Guid.NewGuid();
            await context.AddRangeAsync(
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.0.1", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.10.0.10" },
                new Host { Id = deletedHostGuid, IPv4 = "192.168.0.12", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv4 = "175.54.5.50", OS=string.Empty, IPv6=string.Empty },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var result = await controller.DeleteHost(deletedHostGuid) as NoContentResult;

            Assert.Equal(204, result!.StatusCode);
            var remainingHosts = await context.Hosts
                .AsNoTracking()
                .ToListAsync();
            Assert.Equal(5, remainingHosts.Count);
            Assert.DoesNotContain(remainingHosts, h => h.Id == deletedHostGuid);
        }

        [Fact]
        public async Task DeleteHost_Should_Not_Delete_Linked_Domain_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var deletedHostGuid = Guid.NewGuid();
            var host = new Host
            {
                Id = deletedHostGuid,
                IPv4 = "10.10.0.10"
            };
            host.Domains.Add(new Domain { TopDomain = "top.domain2", SubDomain="" });
            await context.AddAsync(host);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var result = await controller.DeleteHost(deletedHostGuid) as NoContentResult;

            Assert.Equal(204, result!.StatusCode);
            var remainingHosts = await context.Hosts
                .AsNoTracking()
                .ToListAsync();
            Assert.Empty(remainingHosts);
            var remainingDomains = await context.Domains
                .AsNoTracking()
                .ToListAsync();
            Assert.Contains(remainingDomains, d => string.Equals(d.Name, "top.domain2"));
        }

        [Fact]
        public async Task DeleteHost_Should_Delete_Linked_Ports_Async()
        {
            var nmapParserMock = new Mock<INmapXmlParser>();
            
            var context = CreateContext();
            var deletedHostGuid = Guid.NewGuid();
            var host = new Host
            {
                Id = deletedHostGuid,
                IPv4 = "10.10.0.10"
            };
            var dbPorts = new[]
            {
                new Port { PortNumber=22, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=80, PortState=Port.State.Open, ServiceName=string.Empty },
                new Port { PortNumber=8080, PortState=Port.State.Open, ServiceName=string.Empty },
            };
            host.Ports.AddRange(dbPorts);
            await context.AddAsync(host);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);
            var controller = new HostsController(context, nmapParserMock.Object, repository);

            var result = await controller.DeleteHost(deletedHostGuid) as NoContentResult;

            Assert.Equal(204, result!.StatusCode);
            var remainingHosts = await context.Hosts
                .AsNoTracking()
                .ToListAsync();
            Assert.Empty(remainingHosts);
            var remainingDomains = await context.Ports
                .AsNoTracking()
                .ToListAsync();
            Assert.Empty(remainingDomains);
        }

        public void Dispose()
        {
            var context = CreateContext();
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
            _connection.Dispose();
        }
    }
}
