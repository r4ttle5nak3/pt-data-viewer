using Microsoft.Extensions.Logging;
using Moq;
using PenTestDataViewer.Api.Services.Import;

namespace PenTestDataViewer.Api.Tests.Services.Import
{
    public partial class NmapXmlParserTests
    {
        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);
            
            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Informs_About_Failed_Parsing()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write("Some random text");
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.False(success);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_Info_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_IPv4_Address_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
            var host = parser.Hosts[0];
            Assert.Equal("74.207.244.221", host.IPv4);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_IPv6_Address_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInputIPv6);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
            var host = parser.Hosts[0];
            Assert.Equal("::1", host.IPv6);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_Domains_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
            var host = parser.Hosts[0];
            Assert.Equal(2, host.Domains.Count);
            Assert.Equal("scanme.nmap.org", host.Domains[0].Name);
            Assert.Equal("li86-221.members.linode.com", host.Domains[1].Name);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_Ports_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
            var host = parser.Hosts[0];
            Assert.Equal(2, host.Ports.Count);
            Assert.Equal(22, host.Ports[0].PortNumber);
            Assert.Equal(Api.Model.Port.State.Open, host.Ports[0].PortState);
            Assert.Equal("OpenSSH 5.3p1 Debian 3ubuntu7", host.Ports[0].ServiceName);
            Assert.Equal(80, host.Ports[1].PortNumber);
            Assert.Equal(Api.Model.Port.State.Open, host.Ports[1].PortState);
            Assert.Equal("Apache httpd 2.2.14", host.Ports[1].ServiceName);
        }

        [Fact]
        public async Task TryReadFromStreamAsync_Reads_Host_OS_From_Nmap_Xml_File()
        {
            var loggerMock = new Mock<ILogger<NmapXmlParser>>();
            var stream = new MemoryStream();
            var writer = new StreamWriter(stream);
            writer.Write(ExampleInput);
            writer.Flush();
            stream.Position = 0;

            var parser = new NmapXmlParser(loggerMock.Object);

            var success = await parser.TryReadFromStreamAsync(stream);

            Assert.True(success, "NmapXmlParser failed to read an input file");
            Assert.Single(parser.Hosts);
            var host = parser.Hosts[0];
            Assert.Equal("Linux 2.6.39 Kernel: cpe:/o:linux:linux_kernel:2.6.39", host.OS);
        }
    }
}
