using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Moq;
using PenTestDataViewer.Api.Controllers;
using PenTestDataViewer.Api.Database;
using PenTestDataViewer.Api.Model;
using PenTestDataViewer.Api.Services.Import;
using PenTestDataViewer.Api.Services.Repositories;
using System.Data.Common;
using System.Net;

namespace PenTestDataViewer.Api.Tests.Services.Repositories
{
    public class HostsRepositoryServiceTests : IDisposable
    {
        private DbConnection _connection;
        private DbContextOptions<DatabaseContext> _contextOptions;

        public HostsRepositoryServiceTests()
        {
            _connection = new SqliteConnection("Filename=:memory:");
            _connection.Open();

            _contextOptions = new DbContextOptionsBuilder<DatabaseContext>().UseSqlite(_connection).Options;

            using var context = new DatabaseContext(_contextOptions);

            if (context.Database.EnsureCreated())
            {
                using var viewCommand = context.Database.GetDbConnection().CreateCommand();
                viewCommand.CommandText = @"
CREATE VIEW AllResources AS
SELECT IPv4Raw
FROM Hosts;"
                ;
                viewCommand.ExecuteNonQuery();
            }
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
        }

        DatabaseContext CreateContext() => new DatabaseContext(_contextOptions);

        [Fact]
        public async Task GetHosts_Should_Return_All_Hosts()
        {
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv4 = "10.1.10.11" },
                new Host { Id = Guid.NewGuid(), IPv4 = "2.1.0.10" },
                new Host { Id = Guid.NewGuid(), IPv4 = "200.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = await repository.GetHostsAsync();

            Assert.NotNull(hosts);
            Assert.Equal(6, hosts.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Paginated_Hosts()
        {
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.10.12" },
                new Host { Id = Guid.NewGuid(), IPv4 = "192.168.3.15" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = (await repository.GetHostsAsync(start: 2, pageSize: 2)).ToArray();

            Assert.Equal(2, hosts.Length);
        }


        [Fact]
        public async Task GetHosts_Should_Return_Queried_IPv4_Hosts_Async()
        {
            
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.12" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = await repository.GetHostsAsync(ipv4: "192.168");

            Assert.NotNull(hosts);
            Assert.Equal(2, hosts.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_IPv6_Hosts_Async()
        {
            
            var context = CreateContext();
            context.AddRange(
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
                );
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = await repository.GetHostsAsync(ipv6: "92bc");

            Assert.NotNull(hosts);
            Assert.Single(hosts);
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_Service_Hosts_Async()
        {
            var hosts = new[]
            {
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
            };

            var port = new Port { PortNumber = 80, HostId = hosts[0].Id, ServiceName = "Apache server" };

            var context = CreateContext();
            await context.AddRangeAsync(hosts);
            await context.AddAsync(port);
            await context.SaveChangesAsync();

            var repository = new HostsRepositoryService(context);

            var result = await repository.GetHostsAsync(service: "Apache");

            Assert.NotNull(result);
            Assert.Single(result);
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_Service_Hosts_Contain_Domains_Async()
        {
            var host = new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" };
            host.Domains.Add(new Domain { Name="some.domain.xd"});

            var port = new Port { PortNumber = 80, Host = host, ServiceName = "Apache server" };

            var context = CreateContext();
            //await context.AddAsync(host);
            await context.AddAsync(port);
            await context.SaveChangesAsync();

            var repository = new HostsRepositoryService(context);

            var result = await repository.GetHostsAsync(service: "Apache");

            Assert.Single(result);
            Assert.Single(result.First().Domains);
        }

        [Fact]
        public async Task GetHosts_Should_Return_Queried_Port_Number_Hosts_Async()
        {
            var hosts = new[]
            {
                new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" },
                new Host { Id = Guid.NewGuid(), IPv6="::1" },
                new Host { Id = Guid.NewGuid(), IPv6="fe80::4cc5:6436:24bc:92bc" }
            };

            var port = new Port { PortNumber = 80, HostId = hosts[0].Id, ServiceName = string.Empty };

            var context = CreateContext();
            await context.AddRangeAsync(hosts);
            await context.AddAsync(port);
            await context.SaveChangesAsync();

            var repository = new HostsRepositoryService(context);

            var result = await repository.GetHostsAsync(port: 80);

            Assert.NotNull(result);
            Assert.Single(result);
        }

        [Fact]
        public async Task GetHosts_Should_Return_Hosts_With_Domains_Async()
        {
            
            var context = CreateContext();
            var dbHost = new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" };
            var dbDomains = new[]
            {
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="" },
                new Domain { Id = Guid.NewGuid(), TopDomain="domain.test", SubDomain="helpcenter" }
            };
            dbHost.Domains.AddRange(dbDomains);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = await repository.GetHostsAsync();

            Assert.NotNull(hosts);
            Assert.NotEmpty(hosts.First().Domains);
            Assert.Equal(2, hosts.First().Domains.Count());
        }

        [Fact]
        public async Task GetHosts_Should_Return_Hosts_With_Ports_Async()
        {
            
            var context = CreateContext();
            var dbHost = new Host { Id = Guid.NewGuid(), IPv4="192.168.0.1" };
            var dbPorts = new[]
            {
                new Port { PortNumber=22, PortState=Port.State.Open, ServiceName = string.Empty },
                new Port { PortNumber=80, PortState=Port.State.Open, ServiceName = string.Empty },
                new Port { PortNumber=8080, PortState=Port.State.Open, ServiceName = string.Empty },
            };
            dbHost.Ports.AddRange(dbPorts);
            await context.AddRangeAsync(dbPorts);
            await context.Hosts.AddAsync(dbHost);
            await context.SaveChangesAsync();
            var repository = new HostsRepositoryService(context);

            var hosts = await repository.GetHostsAsync();

            Assert.NotNull(hosts);
            Assert.NotEmpty(hosts.First().Ports);
            Assert.Equal(3, hosts.First().Ports.Count());
        }

        public void Dispose()
        {
            var context = CreateContext();
            context.Database.ExecuteSqlRaw("DELETE FROM [Hosts]");
            context.Database.ExecuteSqlRaw("DELETE FROM [Domains]");
            context.SaveChanges();
            _connection.Dispose();
        }
    }
}
